---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

# python-supported-versions-action
name: "🐍 Extract Python Versions Supported by Project"
description: "Returns Python version(s) for build and JSON for matrix jobs"
# Note: build version is the most recent/latest Python

# Primary extraction method uses 'requires-python' from pyproject.toml
# This brings alignment with actions/setup-python behavior
# e.g. requires-python = ">=3.10" extracts supported versions 3.10, 3.11,
# 3.12, 3.13
# Falls back to 'Programming Language :: Python ::' classifiers if
# requires-python not found

inputs:
  # Mandatory
  PATH_PREFIX:
    description: "Directory location containing project code"
    type: string
    required: false

outputs:
  BUILD_PYTHON:
    description: "Most recent Python version supported by project"
    value: ${{ steps.parse.outputs.build_python }}
  MATRIX_JSON:
    description: "All Python versions supported by project as JSON string"
    # Example: matrix_json = {"python-version": ["3.10", "3.11"]}
    value: ${{ steps.parse.outputs.matrix_json }}

runs:
  using: "composite"
  steps:
    - name: "Setup action/environment"
      shell: bash
      run: |
        # Setup action/environment
        # Handle path_prefix input consistently and when absent
        path_prefix="${{ inputs.PATH_PREFIX }}"
        if [ -z "$path_prefix" ]; then
          # Set current directory as path prefix
          path_prefix="."
        else
          # Strip any trailing slash in provided path
          path_prefix="${path_prefix%/}"
        fi
        # Verify is a valid directory path
        if [ ! -d "$path_prefix" ]; then
          echo "Error: invalid path/prefix to project directory ❌"; exit 1
        fi
        echo "path_prefix=$path_prefix" >> "$GITHUB_ENV"

    - name: "Check for: pyproject.toml"
      id: path-check
      # yamllint disable-line rule:line-length
      uses: lfreleng-actions/path-check-action@aa7dabfa92e50e31a0f091dd3e2741692e8dde07 # v0.1.5
      with:
        path: "${{ env.path_prefix }}/pyproject.toml"

    - name: "Error: missing pyproject.toml file"
      if: steps.path-check.outputs.type != 'file'
      shell: bash
      run: |
        # Error: missing pyproject.toml file
        echo "Error: missing pyproject.toml file ❌"
        exit 1

    - name: "Extract requires-python constraint"
      id: capture-requires-python
      # yamllint disable-line rule:line-length
      uses: lfreleng-actions/file-grep-regex-action@64fbf6bd3315530c6819e16c5b065e3bfc4f16d9 # v0.1.3
      with:
        flags: "-o"
        # Match requires-python value, e.g. ">=3.10", ">=3.10,<3.13"
        # Note: This will extract the full match, we'll parse it in the
        # shell script
        regex: 'requires-python\s*=\s*"[^"]*"'
        filename: "${{ env.path_prefix }}/pyproject.toml"

    - name: "Extract supported Python versions (fallback)"
      id: capture-versions-fallback
      # yamllint disable-line rule:line-length
      uses: lfreleng-actions/file-grep-regex-action@64fbf6bd3315530c6819e16c5b065e3bfc4f16d9 # v0.1.3
      with:
        flags: "-oP"
        # https://regex101.com/r/0mhOlr/1
        # Only matches explicit/full Python versions
        # Those with major/minor versions, e.g. 3.10, 3.11
        regex: '(?<="Programming Language :: Python :: ).*\..*(?=")'
        filename: "${{ env.path_prefix }}/pyproject.toml"

    - id: parse
      name: "Process and transform extracted Python versions"
      shell: bash
      run: |
        # Process and transform extracted Python versions
        set -o pipefail

        # Define currently supported Python versions (not end-of-life)
        # Updated as of June 2025: 3.10, 3.11, 3.12, 3.13, 3.14
        # TODO: Update this list as new Python versions are released and
        # older versions reach EOL
        # See: https://devguide.python.org/versions/
        ALL_SUPPORTED_VERSIONS="3.10 3.11 3.12 3.13 3.14"

        REQUIRES_PYTHON_RAW="${{
          steps.capture-requires-python.outputs.extracted_string }}"

        if [ -n "$REQUIRES_PYTHON_RAW" ]; then
          # Extract the value from requires-python = "value" format
          REQUIRES_PYTHON=$(echo "$REQUIRES_PYTHON_RAW" | \
            sed 's/.*"\([^"]*\)".*/\1/')
          echo "Found requires-python constraint: $REQUIRES_PYTHON 💬"

          # Parse requires-python constraint and determine supported versions
          PYTHON_VERSIONS=""

          # Simple parsing for common constraint formats
          # Handle >=X.Y format (most common)
          if [[ "$REQUIRES_PYTHON" =~ ^'>='([0-9]+\.[0-9]+) ]]; then
            MIN_VERSION="${BASH_REMATCH[1]}"
            echo "Minimum version requirement: >=$MIN_VERSION"

            for version in $ALL_SUPPORTED_VERSIONS; do
              if [ "$(printf '%s\n' "$MIN_VERSION" "$version" | \
                sort -V | head -n1)" = "$MIN_VERSION" ]; then
                if [ -z "$PYTHON_VERSIONS" ]; then
                  PYTHON_VERSIONS="$version"
                else
                  PYTHON_VERSIONS="$PYTHON_VERSIONS $version"
                fi
              fi
            done
          # Handle >X.Y format
          elif [[ "$REQUIRES_PYTHON" =~ ^'>'([0-9]+\.[0-9]+) ]]; then
            MIN_VERSION="${BASH_REMATCH[1]}"
            echo "Minimum version requirement: >$MIN_VERSION"

            for version in $ALL_SUPPORTED_VERSIONS; do
              if [ "$(printf '%s\n' "$MIN_VERSION" "$version" | \
                sort -V | tail -n1)" = "$version" ] && \
                [ "$version" != "$MIN_VERSION" ]; then
                if [ -z "$PYTHON_VERSIONS" ]; then
                  PYTHON_VERSIONS="$version"
                else
                  PYTHON_VERSIONS="$PYTHON_VERSIONS $version"
                fi
              fi
            done
          # Handle ==X.Y format
          elif [[ "$REQUIRES_PYTHON" =~ ^'=='([0-9]+\.[0-9]+) ]]; then
            EXACT_VERSION="${BASH_REMATCH[1]}"
            echo "Exact version requirement: ==$EXACT_VERSION"

            for version in $ALL_SUPPORTED_VERSIONS; do
              if [ "$version" = "$EXACT_VERSION" ]; then
                PYTHON_VERSIONS="$version"
                break
              fi
            done
          else
            echo "Warning: Unsupported requires-python format: $REQUIRES_PYTHON"
            echo "Supported formats: >=X.Y, >X.Y, ==X.Y"
          fi

          if [ -z "$PYTHON_VERSIONS" ]; then
            echo "Warning: No supported versions found from \
              requires-python constraint"
            echo "Falling back to Programming Language \
              classifiers method..."
            FALLBACK="${{ steps.capture-versions-fallback.outputs.extracted_string }}"
            PYTHON_VERSIONS=$(echo \
              "$FALLBACK" \
              | sort | uniq | tr -d ' ') 2>/dev/null
          else
            echo "Extracted versions from requires-python: \
              $PYTHON_VERSIONS 💬"
          fi
        else
          echo "No requires-python found, using Programming Language \
            classifiers fallback..."
          FALLBACK="${{ steps.capture-versions-fallback.outputs.extracted_string }}"
          PYTHON_VERSIONS=$(echo \
            "$FALLBACK" \
            | sort | uniq | tr -d ' ') 2>/dev/null
        fi

        if [ -z "$PYTHON_VERSIONS" ]; then
          echo "Error: No Python versions found ❌"
          exit 1
        fi

        BUILD_PYTHON=$(echo "${PYTHON_VERSIONS}" | tr ' ' '\n' | \
          sort -V | tail -1)
        STRING=$(echo "$PYTHON_VERSIONS" | tr ' ' '\n' | sort -V |\
          awk '{print "\""$1"\""}' | paste -s -d, -)
        STRING="[$STRING]"
        MATRIX_JSON="{\"python-version\": $STRING}"
        if ! (echo "$MATRIX_JSON" | jq); then
          echo "Error: parsed string not valid JSON ❌"
          exit 1
        fi

        # Set action outputs
        echo "build_python=$BUILD_PYTHON" >> "$GITHUB_ENV"
        echo "build_python=$BUILD_PYTHON" >> "$GITHUB_OUTPUT"
        echo "Build Python: $BUILD_PYTHON 💬"
        echo "matrix_json=$MATRIX_JSON" >> "$GITHUB_ENV"
        echo "matrix_json=$MATRIX_JSON" >> "$GITHUB_OUTPUT"
        echo "Matrix JSON: $MATRIX_JSON"
