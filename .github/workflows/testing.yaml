---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

# Action test/validation workflow
name: 'Test GitHub Action ðŸ§ª'

# yamllint disable-line rule:truthy
on:
  workflow_dispatch:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

permissions: {}

jobs:
  ### Comprehensive Test Suite (All Fixtures) ###
  test-comprehensive:
    name: 'Comprehensive Test Suite'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    timeout-minutes: 8
    steps:
      # Harden the runner used by this workflow
      # yamllint disable-line rule:line-length
      - uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: 'audit'

      - name: 'Checkout repository'
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: 'Run comprehensive test suite'
        run: |
          echo "ðŸ§ª Running comprehensive test suite..."
          ./tests/scripts/test_all.sh

  ### Test External Repository ###
  test-external-repo:
    name: 'Test External Repository'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    timeout-minutes: 8
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: 'Checkout sample project repository'
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          repository: 'lfreleng-actions/test-python-project'
          path: 'test-python-project'

      # yamllint disable rule:line-length

      - name: 'Test External Project'
        id: test-external
        uses: ./
        with:
          path_prefix: 'test-python-project/'

      - name: 'Validate External Project Output'
        run: |
          echo "Build Python: '${{ steps.test-external.outputs.build_python }}'"

          # Use the raw matrix_json output and compact it with jq for consistent comparison
          actual_json=$(echo '${{ steps.test-external.outputs.matrix_json }}' | jq -c .)
          echo "Matrix JSON: '$actual_json'"

          # Validate that outputs are not empty
          if [ -z "${{ steps.test-external.outputs.build_python }}" ]; then
            echo "Error: build_python output is empty"
            exit 1
          fi
          if [ -z "${{ steps.test-external.outputs.matrix_json }}" ]; then
            echo "Error: matrix_json output is empty"
            exit 1
          fi

          # Validate matrix_json contains only valid Python versions (no text values)
          # Extract the python-version array and check each element is a valid version number
          # yamllint disable-line rule:line-length
          if ! echo "$actual_json" | jq -e '.["python-version"] | type == "array"' >/dev/null; then
            echo "Error: matrix_json does not contain a python-version array"
            exit 1
          fi

          # Check that all array elements are valid version strings (X.Y format)
          # yamllint disable-line rule:line-length
          invalid_versions=$(echo "$actual_json" | jq -r '.["python-version"][] | select(test("^[0-9]+\\.[0-9]+$") | not)')
          if [ -n "$invalid_versions" ]; then
            echo "Error: matrix_json contains invalid version entries:"
            echo "$invalid_versions"
            echo "Expected format: only numeric versions like '3.11', '3.12'"
            exit 1
          fi

          # For test-python-project, we expect Python 3.11 and 3.12 based on requires-python = "<3.13,>=3.11"
          # yamllint disable-line rule:line-length
          expected_json='{"python-version":["3.11","3.12"]}'
          if [ "$expected_json" != "$actual_json" ]; then
            echo "Error: matrix_json mismatch for test-python-project"
            echo "Expected: $expected_json"
            echo "Actual:   $actual_json"
            exit 1
          fi

          echo "External repository test passed âœ…"

  ### Test Missing pyproject.toml ###
  test-missing-pyproject:
    name: 'Test Missing pyproject.toml'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    timeout-minutes: 8
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: 'Create empty test directory'
        run: mkdir -p empty-test-dir

      - name: 'Test missing pyproject.toml'
        id: test-missing
        uses: ./
        with:
          path_prefix: 'empty-test-dir/'
        continue-on-error: true

      - name: 'Validate missing pyproject.toml failure'
        run: |
          if [ "${{ steps.test-missing.outcome }}" != "failure" ]; then
            echo "Error: Expected test to fail due to missing pyproject.toml"
            exit 1
          fi
          echo "Test correctly failed due to missing pyproject.toml"

  ### Test Poetry Fixtures ###
  test-poetry-fixtures:
    name: 'Test Poetry Fixtures'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    timeout-minutes: 8
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: poetry-caret
            file: tests/fixtures/pyproject_poetry_caret.toml
            expected_versions: "3.10 3.11 3.12 3.13"
            expected_build: "3.13"
          - name: poetry-compatible
            file: tests/fixtures/pyproject_poetry_compatible.toml
            expected_versions: "3.11"
            expected_build: "3.11"
          - name: poetry-exact
            file: tests/fixtures/pyproject_poetry_exact.toml
            expected_versions: "3.12"
            expected_build: "3.12"
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: 'Prepare fixture workspace'
        run: |
          set -euo pipefail
          workdir="poetry-fixture-${{ matrix.name }}"
          mkdir -p "$workdir"
          cp "${{ matrix.file }}" "$workdir/pyproject.toml"
          echo "WORKDIR=$workdir" >> "$GITHUB_ENV"

      - name: 'Run action on Poetry fixture (offline)'
        id: run
        uses: ./
        with:
          path_prefix: '${{ env.WORKDIR }}/'
          offline_mode: 'true'

      - name: 'Assert outputs for Poetry fixture'
        # yamllint disable rule:line-length
        run: |
          echo "Supported versions: '${{ steps.run.outputs.supported_versions }}'"
          echo "Build Python: '${{ steps.run.outputs.build_python }}'"

          # Use the raw matrix_json output and compact it with jq for consistent comparison
          actual_json=$(echo '${{ steps.run.outputs.matrix_json }}' | jq -c .)
          echo "Matrix JSON: '$actual_json'"

          if [ "${{ steps.run.outputs.build_python }}" != "${{ matrix.expected_build }}" ]; then
            echo "Error: build_python mismatch (expected '${{ matrix.expected_build }}')"
            exit 1
          fi
          if [ "${{ steps.run.outputs.supported_versions }}" != "${{ matrix.expected_versions }}" ]; then
            echo "Error: supported_versions mismatch (expected '${{ matrix.expected_versions }}')"
            exit 1
          fi

          # Construct expected JSON using jq to ensure formatting matches
          expected_json=$(printf '%s\n' "${{ matrix.expected_versions }}" | tr ' ' '\n' | jq -R . | jq -s -c '{"python-version": .}')

          if [ "$expected_json" != "$actual_json" ]; then
            echo "Error: matrix_json mismatch"
            echo "Expected: $expected_json"
            echo "Actual:   $actual_json"
            exit 1
          fi
          echo "Poetry fixture '${{ matrix.name }}' passed âœ…"
